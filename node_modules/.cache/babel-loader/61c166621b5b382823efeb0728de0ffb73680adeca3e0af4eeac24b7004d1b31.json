{"ast":null,"code":"import { GEMINI_API_URL } from '../config';\nexport const generateContent = async data => {\n  try {\n    // Обновляем prompt с указанием не использовать специальные символы\n    const prompt = `Напиши детскую сказку о приключениях для ребенка по имени ${data.name}, которому ${data.age} лет и который любит ${data.interests}. История должна быть добрая и увлекательная, подходящая для его возраста. Используй только буквы русского алфавита, цифры и простые знаки препинания (точка, запятая, восклицательный и вопросительный знаки). Не используй специальные символы, эмодзи или другие необычные знаки.`;\n\n    // Подготавливаем данные для запроса в правильном формате\n    const requestData = {\n      contents: [{\n        parts: [{\n          text: prompt\n        }]\n      }]\n    };\n    const response = await fetch(GEMINI_API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(requestData)\n    });\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const result = await response.json();\n\n    // Очищаем текст от возможных специальных символов\n    let story = result.candidates[0].content.parts[0].text;\n\n    // Заменяем возможные специальные символы на простые аналоги\n    story = story.replace(/[^\\w\\s.,!?а-яА-ЯёЁ\\-]/g, '');\n    return {\n      content: story\n    };\n  } catch (error) {\n    console.error('Error fetching data from Gemini API:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["GEMINI_API_URL","generateContent","data","prompt","name","age","interests","requestData","contents","parts","text","response","fetch","method","headers","body","JSON","stringify","ok","Error","result","json","story","candidates","content","replace","error","console"],"sources":["C:/design/KotoGram/src/api/geminiApi.js"],"sourcesContent":["import { GEMINI_API_URL } from '../config';\r\n\r\nexport const generateContent = async (data) => {\r\n    try {\r\n        // Обновляем prompt с указанием не использовать специальные символы\r\n        const prompt = `Напиши детскую сказку о приключениях для ребенка по имени ${data.name}, которому ${data.age} лет и который любит ${data.interests}. История должна быть добрая и увлекательная, подходящая для его возраста. Используй только буквы русского алфавита, цифры и простые знаки препинания (точка, запятая, восклицательный и вопросительный знаки). Не используй специальные символы, эмодзи или другие необычные знаки.`;\r\n\r\n        // Подготавливаем данные для запроса в правильном формате\r\n        const requestData = {\r\n            contents: [{\r\n                parts: [{ text: prompt }]\r\n            }]\r\n        };\r\n\r\n        const response = await fetch(GEMINI_API_URL, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(requestData)\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Network response was not ok');\r\n        }\r\n\r\n        const result = await response.json();\r\n        \r\n        // Очищаем текст от возможных специальных символов\r\n        let story = result.candidates[0].content.parts[0].text;\r\n        \r\n        // Заменяем возможные специальные символы на простые аналоги\r\n        story = story.replace(/[^\\w\\s.,!?а-яА-ЯёЁ\\-]/g, '');\r\n        \r\n        return { content: story };\r\n    } catch (error) {\r\n        console.error('Error fetching data from Gemini API:', error);\r\n        throw error;\r\n    }\r\n}; "],"mappings":"AAAA,SAASA,cAAc,QAAQ,WAAW;AAE1C,OAAO,MAAMC,eAAe,GAAG,MAAOC,IAAI,IAAK;EAC3C,IAAI;IACA;IACA,MAAMC,MAAM,GAAG,6DAA6DD,IAAI,CAACE,IAAI,cAAcF,IAAI,CAACG,GAAG,wBAAwBH,IAAI,CAACI,SAAS,sRAAsR;;IAEva;IACA,MAAMC,WAAW,GAAG;MAChBC,QAAQ,EAAE,CAAC;QACPC,KAAK,EAAE,CAAC;UAAEC,IAAI,EAAEP;QAAO,CAAC;MAC5B,CAAC;IACL,CAAC;IAED,MAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACZ,cAAc,EAAE;MACzCa,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,WAAW;IACpC,CAAC,CAAC;IAEF,IAAI,CAACI,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAClD;IAEA,MAAMC,MAAM,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;;IAEpC;IACA,IAAIC,KAAK,GAAGF,MAAM,CAACG,UAAU,CAAC,CAAC,CAAC,CAACC,OAAO,CAACf,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI;;IAEtD;IACAY,KAAK,GAAGA,KAAK,CAACG,OAAO,CAAC,wBAAwB,EAAE,EAAE,CAAC;IAEnD,OAAO;MAAED,OAAO,EAAEF;IAAM,CAAC;EAC7B,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC5D,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}