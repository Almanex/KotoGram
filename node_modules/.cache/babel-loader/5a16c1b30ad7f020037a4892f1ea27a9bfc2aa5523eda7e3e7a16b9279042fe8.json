{"ast":null,"code":"// Временное решение для хранения историй в localStorage\nexport const saveStory = async storyData => {\n  try {\n    const stories = JSON.parse(localStorage.getItem('stories') || '[]');\n    const newStory = {\n      id: Date.now().toString(),\n      ...storyData\n    };\n    stories.push(newStory);\n    localStorage.setItem('stories', JSON.stringify(stories));\n    return newStory;\n  } catch (error) {\n    console.error('Error saving story:', error);\n    throw error;\n  }\n};\nexport const getStories = async () => {\n  try {\n    const stories = JSON.parse(localStorage.getItem('stories') || '[]');\n    return stories;\n  } catch (error) {\n    console.error('Error getting stories:', error);\n    throw error;\n  }\n};\nexport const getStoryById = async id => {\n  try {\n    const stories = JSON.parse(localStorage.getItem('stories') || '[]');\n    return stories.find(story => story.id === id);\n  } catch (error) {\n    console.error('Error getting story:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["saveStory","storyData","stories","JSON","parse","localStorage","getItem","newStory","id","Date","now","toString","push","setItem","stringify","error","console","getStories","getStoryById","find","story"],"sources":["C:/design/KotoGram/src/api/storyApi.js"],"sourcesContent":["// Временное решение для хранения историй в localStorage\r\nexport const saveStory = async (storyData) => {\r\n    try {\r\n        const stories = JSON.parse(localStorage.getItem('stories') || '[]');\r\n        const newStory = {\r\n            id: Date.now().toString(),\r\n            ...storyData\r\n        };\r\n        stories.push(newStory);\r\n        localStorage.setItem('stories', JSON.stringify(stories));\r\n        return newStory;\r\n    } catch (error) {\r\n        console.error('Error saving story:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getStories = async () => {\r\n    try {\r\n        const stories = JSON.parse(localStorage.getItem('stories') || '[]');\r\n        return stories;\r\n    } catch (error) {\r\n        console.error('Error getting stories:', error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport const getStoryById = async (id) => {\r\n    try {\r\n        const stories = JSON.parse(localStorage.getItem('stories') || '[]');\r\n        return stories.find(story => story.id === id);\r\n    } catch (error) {\r\n        console.error('Error getting story:', error);\r\n        throw error;\r\n    }\r\n}; "],"mappings":"AAAA;AACA,OAAO,MAAMA,SAAS,GAAG,MAAOC,SAAS,IAAK;EAC1C,IAAI;IACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;IACnE,MAAMC,QAAQ,GAAG;MACbC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzB,GAAGV;IACP,CAAC;IACDC,OAAO,CAACU,IAAI,CAACL,QAAQ,CAAC;IACtBF,YAAY,CAACQ,OAAO,CAAC,SAAS,EAAEV,IAAI,CAACW,SAAS,CAACZ,OAAO,CAAC,CAAC;IACxD,OAAOK,QAAQ;EACnB,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAME,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACA,MAAMf,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;IACnE,OAAOJ,OAAO;EAClB,CAAC,CAAC,OAAOa,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,OAAO,MAAMG,YAAY,GAAG,MAAOV,EAAE,IAAK;EACtC,IAAI;IACA,MAAMN,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC;IACnE,OAAOJ,OAAO,CAACiB,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACZ,EAAE,KAAKA,EAAE,CAAC;EACjD,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}